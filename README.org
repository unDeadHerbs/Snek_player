* Notes
** 09846
  In [[https://www.youtube.com/watch?v=TOpBcfbAgPg][How to Win Snake: The UNKILLABLE Snake AI]] AlphaPhoenix is
  responding to [[https://www.youtube.com/watch?v=tjQIO1rqTBE][I Created a PERFECT SNAKE A.I.]] by Code Bullet.

  I don't think finding a full Hamiltonian path is needed.  The board
  is guaranteed to be connected by the rules of the game.  As such the
  head need only be able to reach a valid path from the apple to the
  current tail to guarantee non-death.  Is that correct?  Yes, in the
  worst case end game where there are a large number of small bubbles
  around the map, the head needs to collect up those bubbles until
  there is enough space to grab the apple.  This will always be
  possible, because if a single bubble is stranded it must have a
  corner surrounded by three or more adjacent tail parts.  If there
  are exactly three then the bubble can be moved, if there are more
  than three then the bubble can also be moved.  These bubbles can
  then be collected together until they are in the path of the head
  following the tail.  It would be better if this was avoided, but can
  be solved as a problem when the end game is reached.  I suspect the
  algorithm will end up looking like a three search of possible
  futures for a path that meats the prior criteria.  Once the game is
  in this end state where bubbles need moving the tree will have great
  depth but almost no breadth.

  This trusting in the existence of a path by knowing that the tail is
  a long enough loop means that the board can be very large and need
  not be in a normal grid; either by not being in a square arena or by
  not using the normal tile rules (hexagons or triangles instead).
  Merely as long as a Hamiltonian path exists on the map it will be
  reachable by following the tail and re-adding parts of the map to
  the path.

  The terminal bubble case described above can be avoided by not
  allowing sections of the map smaller than a given size from being
  cut off.  This restriction will prevent the snake from building the
  bubbles and will cause ...

  Searching this tree is an interesting problem, an A* like metric can
  be used, where futures that have a lower heuristic cost plus current
  cost are considered first.  That doesn't really describe an
  algorithm.  A dual path search is being performed, one from the head
  to the apple and one from the apple to the future tail.  Both of
  these trees are being trimmed by the above "no bubbles"
  restriction.  A* can be modified to consider this dual ended
  search.

  Take a board position: A current snake length, positions, and apple
  position.  (The length after eating an apple and the board size
  (connectivity) are both parts of the game.)  We already know that
  the apple will be on the path once found.  A quick first trial is to
  find if any path to the apple exists, if none, head towards the tail
  on shortest path that maintains the rules.  This can be improved by
  seeing where the tail must not be and how long it will be until the
  tail isn't in the way.  That fits with the ability to know the
  future.  After each step the board will have changed, so the
  possible path to the apple will have changed.  This means that A*
  will need a different way of telling if two paths to a node are to
  the same node, since the path to the node is important in the node's
  identity.  That's fine the ability to consider two paths to a node
  and remove the lesser isn't important in A*.  Using normal A* with
  the boundaries moving with the current distance means that the
  "sand" that fills around invalid paths will have to fill a 3 or 4
  dimensional bucket as the search happens rather than the regular 2.
  Once a path to the apple is found the same can be done to find a
  path to the tail (with a bubble).

  An even better snake AI would take into account the average distance
  to all other points after eating the apple, since that's the average
  distance to the next apple.  This would then prevent the snake from
  building blocks to parts of the map that aren't needed, if a portion
  of the map can be not blocked off by taking an extra two or three
  moves then this will (on average) decrease the distance to the next
  apple.  This would require running an A* from the apple to each
  other free (or likely to be free) square in the metric for getting
  to the apple, doable but slow.
** Transcribe Audio Log Here
** 09848
   The A* algorithm works by having a fast good-ish metric for how far
   away the goal is and then using that to prioritize paths.  The
   metric I wrote there works by doing the same thing, wrapped around
   A*.  This is very slow for two reasons; firstly, A* is pretty slow,
   I have ranted before about how A* really likes it's own worst
   case; and secondly, the entire state of the A* is dropped each time
   since it's hard to reuse.

   I could fix this by either helping the inner A* to be better with
   some variants, or I could try to use only one layer of search by
   improving the initial distance guess.  I'm going to go with the
   latter.

   Take a small number of taxicab paths directly to the goal, return
   the length of the path (same for all) plus the amount of time that
   would be needed to wait along each path.  The amount of time needed
   to wait is, taking the first intersection with the body, how much
   tail would need to be waited for once we get there.  Just as in the
   initial metric, this will return mostly invalid paths, but it will
   give an estimate of how far away the correct path is (since the
   wait time is also, at worst, half the distance to go around the
   tail).
** 09849
   The two major things left I want to fix are: firstly, the reachable
   flood fill is slow to check; and, secondly, reachable needs to be
   extended to calculate the size and quantity of unreachable
   regions.

   This fist change is because =reachable= is checked on every
   consideration step to keep the invariant I'm checking valid.  The
   second is to add a metric that minimizes holes.  This should reduce
   the average travel distance to placed apples and prevent lots of
   small holes from forming in the end game.

   I plan to improve this metric by firstly making a data structure
   that better represents a Boolean matrix.  I will then implement a
   more efficient flood fill over this structure.  Once the initial
   fill is done the system will either return if the goal was found;
   or, if the region count was requested, add the size of the region
   to a list.  Then the system will find the next unfilled cell and
   repeat until the sizes of every region is known.  This list will
   then be sorted and returned.

   I have two different plans for how to improve the flood fill. The
   first is that if the snake body doesn't touch itself or the wall
   then no regions can be formed, this is faster than trying to fill
   the region in most cases.  The second is to break the major grid
   into smaller sections, if a section is empty of body then it can be
   filled as a single unit, if the body has no touching points in the
   region then the region can be split into two separately fill-able
   spaces, carrying that connectivity information to the adjacent
   regions.  If the region has body touching then there are probably
   optimizations that can be done, but that will be for later
   investigation.
** 09849
   Improving the express-ability and test-ability of metrics should be
   soon on the improvements.  An AI in the system I've been developing
   has three portions.  Firstly, if it's using BFS or DFS, this is
   mostly just a feature of =priority_stack= vs =priority_queue=; but,
   this has wide implications as to how the metric shapes the search.
   Secondly, the metric.  The metric should be passed in as a lambda.
   The metrics I've been making are of a fairly simple form, detect
   what case we are in, and chose a weighting based on that case.
   Thirdly is the cutting system.  This is technically not needed but
   makes the search significantly faster and is a simple method of
   expressing invariants than the metric is.

   As a side note; that describes a system of building AIs that is
   fundamentally bad exploring whole path based goals, such as the one
   described in the audio log, since it can't make variations on
   existing paths, it must instead discover the altered path.
** 09851
   Since the snake is a single wall and the surrounding wall is
   closed, there can only ever be at most two distinct paths to the
   goal.  One going left and one going right.  More precisely, There
   is a path from the head to the goal and there is a path from the
   head back to the head, and one can add or subtract the path from
   the head to the head an arbitrary number of times to or from the
   path to the goal.

   This isn't precisely true, since as the snake moves the wall that
   the snake is also moves, but the structure of that idea is still
   true.

   This leads to a different path finding idea.  Move from the head
   along the body of the snake in both directions, making an envelope
   of the body.  The path to any of these points is simple, just
   follow the edge of the body (assuming the goal isn't trapped). This
   can then be improved/reduced by shrinking the envelope when there
   is a concave section.  From this one can then take the point on
   this convex hull which is the closest to the goal (including the
   path time to that point on the hull).  This path can then be
   improved for other metrics by working backwards along it to enforce
   the requirements, adding wiggles near the end to fill in pockets
   that would be created (working from the end so that the tail
   disappears into those pockets and removes some of the pockets from
   needing solving).
   
   This only easily solves the question when the snake is below a
   large portion of the map, once the snake is quite large the chance
   of the goal appearing within a coil becomes important.  This can
   either be prevented by not permitting gaps to appear, but that
   requires a lot of work. [fn::if a cup of 2 depth and 3 width is
   created then the filling of that will create a size 1 pocket, this
   grows to larger and larger shapes that must be prevented.]  Once
   the body is most of the structure using the Hamiltonian path that
   the body has created for us keep all of the space reachable between
   the head and the tail is a good solution.  Notably, if there are no
   pockets, the rules to prevent pockets will already cause the head
   to take detours to prevent pocket creation.  But again, this would
   need to be careful since unfillable shapes can be formed and the
   tail needs to be kept visible (within the only pocket).
